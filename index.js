!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!_[e]||!v[e])return;for(var n in v[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(p[n]=t[n]);0==--g&&0===x&&I()}(e,n),t&&t(e,n)};var n,s=!0,r="c242d2221f1fa9268d26",i={},a=[],o=[];function u(e){var t=P[e];if(!t)return k;var s=function(s){return t.hot.active?(P[s]?-1===P[s].parents.indexOf(e)&&P[s].parents.push(e):(a=[e],n=s),-1===t.children.indexOf(s)&&t.children.push(s)):(console.warn("[HMR] unexpected require("+s+") from disposed module "+e),a=[]),k(s)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return k[e]},set:function(t){k[e]=t}}};for(var i in k)Object.prototype.hasOwnProperty.call(k,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(s,i,r(i));return s.e=function(e){return"ready"===d&&h("prepare"),x++,k.e(e).then(t,(function(e){throw t(),e}));function t(){x--,"prepare"===d&&(w[e]||M(e),0===x&&0===g&&I())}},s.t=function(e,t){return 1&t&&(e=s(e)),k.t(e,-2&t)},s}function l(t){var s={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)s._selfAccepted=!0;else if("function"==typeof e)s._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)s._acceptedDependencies[e[n]]=t||function(){};else s._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)s._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)s._declinedDependencies[e[t]]=!0;else s._declinedDependencies[e]=!0},dispose:function(e){s._disposeHandlers.push(e)},addDisposeHandler:function(e){s._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=s._disposeHandlers.indexOf(e);t>=0&&s._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":(p={})[t]=e[t],h("ready");break;case"ready":E(t);break;case"prepare":case"check":case"dispose":case"apply":(y=y||[]).push(t)}},check:O,apply:S,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:i[t]};return n=void 0,s}var c=[],d="idle";function h(e){d=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var f,p,m,y,g=0,x=0,w={},v={},_={};function b(e){return+e+""===e?+e:e}function O(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return s=e,h("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var s=new XMLHttpRequest,i=k.p+""+r+".hot-update.json";s.open("GET",i,!0),s.timeout=t,s.send(null)}catch(e){return n(e)}s.onreadystatechange=function(){if(4===s.readyState)if(0===s.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===s.status)e();else if(200!==s.status&&304!==s.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(s.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return h(D()?"ready":"idle"),null;v={},w={},_=e.c,m=e.h,h("prepare");var t=new Promise((function(e,t){f={resolve:e,reject:t}}));p={};return M(0),"prepare"===d&&0===x&&0===g&&I(),t}));var t}function M(e){_[e]?(v[e]=!0,g++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=k.p+""+e+"."+r+".hot-update.js",document.head.appendChild(t)}(e)):w[e]=!0}function I(){h("ready");var e=f;if(f=null,e)if(s)Promise.resolve().then((function(){return S(s)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&t.push(b(n));e.resolve(t)}}function S(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");return function t(s){var o,u,l,c,d;function f(e){for(var t=[e],n={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var r=s.pop(),i=r.id,a=r.chain;if((c=P[i])&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var o=0;o<c.parents.length;o++){var u=c.parents[o],l=P[u];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(l.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),g(n[u],[i])):(delete n[u],t.push(u),s.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function g(e,t){for(var n=0;n<t.length;n++){var s=t[n];-1===e.indexOf(s)&&e.push(s)}}D();var x={},w=[],v={},O=function(){console.warn("[HMR] unexpected require("+I.moduleId+") to disposed module")};for(var M in p)if(Object.prototype.hasOwnProperty.call(p,M)){var I;d=b(M),I=p[M]?f(d):{type:"disposed",moduleId:M};var S=!1,E=!1,C=!1,A="";switch(I.chain&&(A="\nUpdate propagation: "+I.chain.join(" -> ")),I.type){case"self-declined":s.onDeclined&&s.onDeclined(I),s.ignoreDeclined||(S=new Error("Aborted because of self decline: "+I.moduleId+A));break;case"declined":s.onDeclined&&s.onDeclined(I),s.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+I.moduleId+" in "+I.parentId+A));break;case"unaccepted":s.onUnaccepted&&s.onUnaccepted(I),s.ignoreUnaccepted||(S=new Error("Aborted because "+d+" is not accepted"+A));break;case"accepted":s.onAccepted&&s.onAccepted(I),E=!0;break;case"disposed":s.onDisposed&&s.onDisposed(I),C=!0;break;default:throw new Error("Unexception type "+I.type)}if(S)return h("abort"),Promise.reject(S);if(E)for(d in v[d]=p[d],g(w,I.outdatedModules),I.outdatedDependencies)Object.prototype.hasOwnProperty.call(I.outdatedDependencies,d)&&(x[d]||(x[d]=[]),g(x[d],I.outdatedDependencies[d]));C&&(g(w,[I.moduleId]),v[d]=O)}var j,B=[];for(u=0;u<w.length;u++)d=w[u],P[d]&&P[d].hot._selfAccepted&&v[d]!==O&&!P[d].hot._selfInvalidated&&B.push({module:d,parents:P[d].parents.slice(),errorHandler:P[d].hot._selfAccepted});h("dispose"),Object.keys(_).forEach((function(e){!1===_[e]&&function(e){delete installedChunks[e]}(e)}));var F,H,U=w.slice();for(;U.length>0;)if(d=U.pop(),c=P[d]){var L={},q=c.hot._disposeHandlers;for(l=0;l<q.length;l++)(o=q[l])(L);for(i[d]=L,c.hot.active=!1,delete P[d],delete x[d],l=0;l<c.children.length;l++){var R=P[c.children[l]];R&&((j=R.parents.indexOf(d))>=0&&R.parents.splice(j,1))}}for(d in x)if(Object.prototype.hasOwnProperty.call(x,d)&&(c=P[d]))for(H=x[d],l=0;l<H.length;l++)F=H[l],(j=c.children.indexOf(F))>=0&&c.children.splice(j,1);h("apply"),void 0!==m&&(r=m,m=void 0);for(d in p=void 0,v)Object.prototype.hasOwnProperty.call(v,d)&&(e[d]=v[d]);var T=null;for(d in x)if(Object.prototype.hasOwnProperty.call(x,d)&&(c=P[d])){H=x[d];var X=[];for(u=0;u<H.length;u++)if(F=H[u],o=c.hot._acceptedDependencies[F]){if(-1!==X.indexOf(o))continue;X.push(o)}for(u=0;u<X.length;u++){o=X[u];try{o(H)}catch(e){s.onErrored&&s.onErrored({type:"accept-errored",moduleId:d,dependencyId:H[u],error:e}),s.ignoreErrored||T||(T=e)}}}for(u=0;u<B.length;u++){var N=B[u];d=N.module,a=N.parents,n=d;try{k(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(t){s.onErrored&&s.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:e}),s.ignoreErrored||T||(T=t),T||(T=e)}else s.onErrored&&s.onErrored({type:"self-accept-errored",moduleId:d,error:e}),s.ignoreErrored||T||(T=e)}}if(T)return h("fail"),Promise.reject(T);if(y)return t(s).then((function(e){return w.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return h("idle"),new Promise((function(e){e(w)}))}(t=t||{})}function D(){if(y)return p||(p={}),y.forEach(E),y=void 0,!0}function E(t){Object.prototype.hasOwnProperty.call(p,t)||(p[t]=e[t])}var P={};function k(t){if(P[t])return P[t].exports;var n=P[t]={i:t,l:!1,exports:{},hot:l(t),parents:(o=a,a=[],o),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}k.m=e,k.c=P,k.d=function(e,t,n){k.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},k.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},k.t=function(e,t){if(1&t&&(e=k(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(k.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)k.d(n,s,function(t){return e[t]}.bind(null,s));return n},k.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return k.d(t,"a",t),t},k.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},k.p="",k.h=function(){return r},u(137)(k.s=137)}([,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e=0,t=0){this.x=e,this.y=t}add(e=0,t){const n=s.from(e,t);return new s(this.x+n.x,this.y+n.y)}subtract(e=0,t){const n=s.from(e,t);return new s(this.x-n.x,this.y-n.y)}multiply(e=0,t){const n=s.from(e,t);return new s(this.x*n.x,this.y*n.y)}divide(e=0,t){const n=s.from(e,t);return new s(this.x/n.x,this.y/n.y)}mod(e=0,t){const n=s.from(e,t);return new s(this.x%n.x,this.y%n.y)}ceil(){return new s(Math.ceil(this.x),Math.ceil(this.y))}floor(){return new s(Math.floor(this.x),Math.floor(this.y))}round(){return new s(Math.fround(this.x),Math.fround(this.y))}abs(){return new s(Math.abs(this.x),Math.abs(this.y))}reverse(){throw new s(-this.x,-this.y)}flip(){throw new s(this.y,this.x)}clone(){return new s(this.x,this.y)}distance(e=0,t){const n=s.from(e,t);return Math.sqrt(this.distanceSquared(n))}distanceSquared(e=0,t){const n=s.from(e,t);return(this.x-n.x)**2+(this.y-n.y)**2}static from(e=0,t){return"number"==typeof e?new s(e,"number"==typeof t?t:e):e instanceof s?e:e instanceof HTMLCanvasElement||e instanceof HTMLImageElement?new s(e.width,e.height):new s(e.w,e.h)}}t.default=s},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this._hidden=!1,this._absolute=!1,this._scale=1,this._rotate=0,this._hue=0,this._brightness=1,this._contrast=1,this._grayscale=!1,this._drawBox=null}hidden(e=!0){return this._hidden=e,this}absolute(e=!0){return this._absolute=e,this}scale(e=1){return this._scale=e,this}rotate(e=0){return this._rotate=e,this}hue(e=0){return this._hue=e,this}brightness(e=1){return this._brightness=e,this}contrast(e=1){return this._contrast=e,this}grayscale(e=!0){return this._grayscale=e,this}drawBox(e=null){return this._drawBox=e,this}applyFilter(e){let t="none"===e.filter?"":e.filter;0!==this._rotate&&e.rotate(-this._rotate),0!==this._hue&&(t+=` hue-rotate(${this._hue}deg) `),1!==this._brightness&&(t+=` brightness(${this._brightness}) `),1!==this._contrast&&(t+=` contrast(${this._contrast}) `),this._grayscale&&(t+=" grayscale(1) "),this._drawBox&&(e.rect(this._drawBox.minX,this._drawBox.minY,this._drawBox.maxX,this._drawBox.maxY),e.clip(),e.clearRect(this._drawBox.minX,this._drawBox.minY,this._drawBox.maxX,this._drawBox.maxY)),e.filter=t}}},,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(17));class i{constructor(e=new r.default,t=new r.default){this.min=r.default.from(e),this.max=r.default.from(t),this.min.x>this.max.x&&([this.min.x,this.max.x]=[this.max.x,this.min.x]),this.min.y>this.max.y&&([this.min.y,this.max.y]=[this.max.y,this.min.y])}get minX(){return this.min.x}get minY(){return this.min.y}get maxX(){return this.max.x}get maxY(){return this.max.y}get xLength(){return this.max.x-this.min.x}get yLength(){return this.max.y-this.min.y}isInside(e,t){const n=r.default.from(e,t);return this.min.x<n.x&&this.max.x>n.x&&this.min.y<n.y&&this.max.y>n.y}add(e,t){const n=r.default.from(e,t);return new i(this.min.add(n),this.max.add(n))}subtract(e,t){const n=r.default.from(e,t);return new i(this.min.subtract(n),this.max.subtract(n))}expand(e,t){const n=r.default.from(e,t);return new i(this.min.subtract(n),this.max.add(n))}contract(e,t){const n=r.default.from(e,t);return new i(this.min.add(n),this.max.subtract(n))}ceil(){return i.from(this.min.ceil(),this.max.ceil())}floor(){return i.from(this.min.floor(),this.max.floor())}round(){return i.from(this.min.round(),this.max.round())}clone(){return i.from(this.min,this.max)}static from(e,t,n,s){return new i(r.default.from(e,n),r.default.from(void 0===t?e:t,void 0===s?n:s))}}t.default=i},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ParticleImages=t.CollectedItemImage=t.CharacterAppearingImage=t.CharacterImages=t.DefaultCharacterImages=t.VirtualGuyImage=t.NinjaFrogImage=t.MaskManImage=t.PinkManImage=t.UiImages=t.IconImage=t.BackgroundImage=t.TextImage=void 0;const r=s(n(98)),i=s(n(142)),a=s(n(143)),o=s(n(144)),u=s(n(145)),l=s(n(146)),c=s(n(147)),d=s(n(148)),h=s(n(149)),f=s(n(150));t.TextImage=i.default,t.BackgroundImage=a.default,t.IconImage=o.default,t.UiImages={Text:t.TextImage,Background:t.BackgroundImage,Icon:t.IconImage},t.PinkManImage=u.default,t.MaskManImage=l.default,t.NinjaFrogImage=c.default,t.VirtualGuyImage=d.default,t.DefaultCharacterImages=(new r.default).set("PinkMan",t.PinkManImage).set("MaskMan",t.MaskManImage).set("NinjaFrog",t.NinjaFrogImage).set("VirtualGuy",t.VirtualGuyImage),t.CharacterImages=new r.default(t.DefaultCharacterImages.entries()),t.CharacterAppearingImage=h.default,t.CollectedItemImage=f.default,t.ParticleImages=(new r.default).set("CharacterAppearing",t.CharacterAppearingImage).set("CollectedItem",t.CollectedItemImage)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(47));t.default=class{constructor(e=new r.default){this.children=[],this.renderOption=null!=e?e:new r.default,this.isDestroyed=!1,this.hoverOutDelay=0,this.onUpdate=()=>{},this.onRender=()=>{},this.onDestroy=()=>{},this.onMouseClick=()=>!1,this.onMouseHover=()=>!1,this.onMouseHoverOut=()=>{},this.init()}init(){}update(e){this.children=this.children.filter(t=>!t.isDestroyed&&(t.update(e),!0)),this.hoverOutDelay>0&&(this.hoverOutDelay-=e,this.hoverOutDelay<=0&&(this.hoverOutDelay=0,this.onMouseHoverOut(this))),this.onUpdate(e,this)}render(e){if(!this.isDestroyed&&!this.isHidden()){if(e.save(),this.renderOption.applyFilter(e),this.children.forEach(t=>{e.save(),t.render(e),e.restore()}),this.onRender(e,this),new URLSearchParams(window.location.search).get("renderBoundingBox")){const t=this.getBoundingBox();t&&(e.beginPath(),e.moveTo(t.minX,t.minY),e.lineTo(t.minX,t.maxY),e.lineTo(t.maxX,t.maxY),e.lineTo(t.maxX,t.minY),e.closePath(),e.stroke())}e.restore()}}mouseClick(e,t){if(this.isDestroyed)return!1;const n=this.getBoundingBox();return!(n&&!n.isInside(this.isAbsolute()?e:t))&&(this.onMouseClick(e,t,this)||-1!==this.children.slice().reverse().findIndex(n=>n.mouseClick(e,t)))}mouseHover(e,t){if(this.isDestroyed)return!1;const n=this.getBoundingBox();return!(!n||!n.isInside(this.isAbsolute()?e:t))&&(this.hoverOutDelay=20,this.onMouseHover(e,t,this)||-1!==this.children.slice().reverse().findIndex(n=>n.mouseHover(e,t)))}destroy(){this.isDestroyed=!0,this.onDestroy(this)}setOnUpdate(e){return this.onUpdate=e,this}setOnRender(e){return this.onRender=e,this}setOnMouseClick(e){return this.onMouseClick=e,this}setOnMouseHover(e){return this.onMouseHover=e,this}setOnMouseHoverOut(e){return this.onMouseHoverOut=e,this}setRenderOption(e){return this.renderOption=e,this}isAbsolute(){return this.renderOption._absolute}isHidden(){return this.renderOption._hidden}isHover(){return this.hoverOutDelay>0}getScale(){return this.renderOption._scale}getDrawBox(){return this.renderOption._drawBox}getBoundingBox(){return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s extends Map{random(){const e=Array.from(this.values());return e[Math.floor(e.length*Math.random()<<0)]}}t.default=s},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconSpriteSheet=t.BackgroundSpriteSheet=t.TextSpriteSheet=t.loadSpriteSheet=void 0;const r=n(68),i=s(n(100)),a=s(n(98)),o=s(n(151)),u=s(n(152)),l=s(n(153));function c(e,t){const n=new a.default;return t.forEach(t=>{var s;n.set(null!==(s=t.name)&&void 0!==s?s:n.size+"",new i.default(t).setImage(e))}),n}t.loadSpriteSheet=c,t.TextSpriteSheet=c(r.TextImage,o.default),t.BackgroundSpriteSheet=c(r.BackgroundImage,u.default),t.IconSpriteSheet=c(r.IconImage,l.default)},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(17));class i{constructor(e){const{w:t,h:n,sx:s,sy:r,ox:i,oy:a}=e;this.w=null!=t?t:0,this.h=null!=n?n:0,this.sx=null!=s?s:0,this.sy=null!=r?r:0,this.ox=null!=i?i:0,this.oy=null!=a?a:0,this._image=null}getImage(){return this._image}setImage(e){return e instanceof HTMLImageElement?this._image=e:"string"==typeof e?(this._image=new Image,this._image.src=e):this._image=null,this}update(e){}draw(e,t,n=1){const s=this.getImage();if(!s||!s.complete||0===s.naturalHeight)return;const i=r.default.from(t);e.save(),e.translate(i.x,i.y),e.drawImage(s,this.sx,this.sy,this.w,this.h,-this.ox*n/2,-this.oy*n/2,this.w*n,this.h*n),e.restore()}static from(e,t,n,s,r,a){return new i({w:e,h:t,sx:n,sy:s,ox:r,oy:a})}}t.default=i},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(100));class i extends r.default{constructor(e,t){const{fps:n,count:s}=t;super(t),this.fps=n,this.frames=[],this.count=0,this.loop=-1,this.elapsedSecs=0,this.onAnimationEnd=()=>{},this.setImage(e);for(let t=0;t<s;++t)this.frames[t]=r.default.from(this.w,this.h,this.sx+t*this.w,this.sy,this.ox,this.oy).setImage(e),++this.count}setImage(e){return super.setImage(e),this.frames.forEach(t=>t.setImage(e)),this}getCurrentFrame(){let e=this.frames[Math.floor(this.elapsedSecs/this.fps)];return e||(0!==this.loop?(-1!==this.loop&&--this.loop,this.elapsedSecs=0,e=this.frames[0]):(e=this.frames[this.frames.length-1],this.onAnimationEnd&&this.onAnimationEnd(this))),null!=e?e:null}setFps(e=60){return this.fps=e,this}setLoop(e=-1){return this.loop=e,this}setOnAnimationEnd(e){return this.onAnimationEnd=e,this}update(e){this.elapsedSecs+=e}draw(e,t,n=1){const s=this.getCurrentFrame();null!==s&&s.draw(e,t,n)}reset(){this.elapsedSecs=0}clone(){return new i(this.getImage(),this)}}t.default=i},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(17)),i=s(n(97)),a=s(n(47));class o extends i.default{constructor(e=null,t=new a.default){super(t),this.app=null,this.activity=null,this.pos=null!=e?e:new r.default}setPos(e){return this.pos=e,this}}t.default=o},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(102)),i=s(n(67)),a=s(n(17)),o=s(n(47));class u extends r.default{constructor(e,t=null,n=new o.default){super(e,n),this.sprite=t}init(){this.onRender=e=>{if(!this.sprite||!this.sprite.getImage())return;const t=a.default.from(this.sprite).multiply(this.getScale()/2);this.sprite.draw(e,this.pos.subtract(t),this.getScale())},this.onUpdate=e=>{var t;null===(t=this.sprite)||void 0===t||t.update(e)}}getBoundingBox(){if(!this.sprite)return null;const e=a.default.from(this.sprite).multiply(this.getScale()/2);return i.default.from(this.pos.subtract(new a.default(this.sprite.ox,this.sprite.oy).multiply(this.getScale()/2))).expand(e)}setSprite(e){return this.sprite=e,this}}t.default=u},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(138)),i=s(n(140));document.addEventListener("DOMContentLoaded",()=>{const e=document.createElement("canvas");e.width=1024,e.height=576,e.id="game",document.body.append(e);const t=new r.default(e);t.addActivity(new i.default(t)),t.update()})},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(17)),i=n(139);t.default=class{constructor(e){this.activities=[],this.canvas=e;const t=this.canvas.getContext("2d");if(!t)throw"Can't get context from canvas";this.ctx=t,this.mouseVec=new r.default,this.elapsedSecs=0,this.lastUpdate=-1,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.mozImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.canvas.onclick=e=>{if(0!==e.button)return;const t=i.getCanvasMousePos(this.canvas,e.pageX,e.pageY,1024);this.activities.slice().reverse().some(e=>e.mouseClick(t,t.add(e.camera)))},this.canvas.onmousemove=e=>{this.mouseVec=i.getCanvasMousePos(this.canvas,e.pageX,e.pageY,1024)}}update(){const e=Date.now();if(-1!==this.lastUpdate){const t=-1===this.lastUpdate?0:e-this.lastUpdate;this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.activities=this.activities.filter(e=>!e.isDestroyed&&(e.update(t),e.render(this.ctx),!0))}this.lastUpdate=e,this.activities.slice().reverse().some(e=>e.mouseHover(this.mouseVec,this.mouseVec.add(e.camera))),i.requestAnimationFrame(this.update.bind(this))}addActivity(e){this.activities.push(e)}}},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getCanvasMousePos=t.requestAnimationFrame=void 0;const r=s(n(17));t.requestAnimationFrame=(window.requestAnimationFrame||window.webkitRequestAnimationFrame||(e=>window.setTimeout(e,1e3/60))).bind(window);t.getCanvasMousePos=(e,t,n,s)=>new r.default(t,n).subtract(e.offsetLeft,e.offsetTop).multiply(s/e.offsetWidth)},function(e,t,n){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&s(t,e,n);return r(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=a(n(141)),u=n(68),l=n(99),c=n(154),d=a(n(47)),h=a(n(17)),f=a(n(158)),p=a(n(159)),m=a(n(103)),y=a(n(101)),g=i(n(160)),x=(e,t)=>(t.renderOption.scale(t.isHover()?3.3:3),!0);class w extends o.default{constructor(e){super(e);const t=new p.default(null,l.BackgroundSpriteSheet.random()),n=c.DefaultCharacterAnimation.idle(u.DefaultCharacterImages.get("PinkMan")),s=c.DefaultCharacterAnimation.run(u.DefaultCharacterImages.get("PinkMan"));n.setLoop(4).setOnAnimationEnd(()=>r.sprite=s.setLoop(6)),s.setLoop(6).setOnAnimationEnd(()=>r.sprite=n.setLoop(4));const r=new m.default(h.default.from(this.app.canvas).multiply(.25,.175),s,(new d.default).absolute().scale(3)),i=new f.default(h.default.from(this.app.canvas).multiply(.5,.1),"random race",(new d.default).absolute().scale(5)),a=new m.default(h.default.from(this.app.canvas).multiply(.95,.1),l.IconSpriteSheet.get("reset"),(new d.default).absolute().scale(3));if(this.addWidget(t.setOnUpdate(e=>{t.pos.x-=e/10})),this.addWidget(r.setOnMouseClick(e=>{n.fps-=3,s.fps-=3,n.fps<0&&(n.fps=100,s.fps=100),this.addWidget(new f.default(e.add(80*Math.random()-40,0),100===n.fps?"-100":"+3",(new d.default).absolute()).setRenderOption((new d.default).scale(2).absolute().hue(360*Math.random()).brightness(6).contrast(2)).setOnUpdate((e,t)=>{t instanceof f.default?(t.pos.y-=e/20,t.pos.y<0&&t.destroy()):t.destroy()}))})),this.addWidget(i),this.addWidget(a.setOnMouseClick(()=>{var e,i;return t.setSprite(l.BackgroundSpriteSheet.random()),r.setSprite(c.DefaultCharacterAnimation.hit(null!==(i=null===(e=r.sprite)||void 0===e?void 0:e.getImage())&&void 0!==i?i:null).setLoop(1).setOnAnimationEnd(()=>{r.setSprite(c.CharacterAppearingAnimation.in().setLoop(0).setOnAnimationEnd(()=>{const e=u.DefaultCharacterImages.random();n.setImage(e),s.setImage(e),r.sprite=n.setLoop(1)}))})),!0}).setOnUpdate(x)),g.isEnabled){const e=g.default,t=new m.default(a.pos.subtract(72,0),l.IconSpriteSheet.get("fullscreen_enter"),(new d.default).absolute().scale(3));this.addWidget(t.setOnMouseClick(()=>e.toggle(document.body)||!0).setOnUpdate(x)),e.on("change",()=>{var n;t.sprite=null!==(n=l.IconSpriteSheet.get(e.isFullscreen?"fullscreen_exit":"fullscreen_enter"))&&void 0!==n?n:null})}for(let e=0;e<30;++e){const e=new m.default(new h.default(Math.random()*this.app.canvas.width,this.app.canvas.height));this.addWidget(e.setOnUpdate(t=>{var n,s;const r=this.getBoundingBox().add(this.camera).maxX;(null!==(s=null===(n=e.getBoundingBox())||void 0===n?void 0:n.minX)&&void 0!==s?s:0)>r&&(e.pos.x=this.camera.x,e.sprite=null),e.sprite||(e.renderOption.scale(5*Math.random()+2.5),e.sprite=c.DefaultCharacterAnimation.run(u.DefaultCharacterImages.random()).setFps(60*Math.random()+30)),e.sprite instanceof y.default&&-1===e.sprite.loop&&(e.pos.x+=t/5*(60/e.sprite.fps)),e.sprite.update(t)}).setOnMouseClick(()=>{if(e.sprite instanceof y.default&&-1===e.sprite.loop)return e.setSprite(c.DefaultCharacterAnimation.hit(e.sprite.getImage()).setLoop(0).setOnAnimationEnd(()=>{e.setSprite(c.CharacterAppearingAnimation.out().setLoop(0).setOnAnimationEnd(()=>{e.pos.x=this.camera.x,e.sprite=null}))})),!0}))}new URLSearchParams(window.location.search).get("renderMouseClick")&&this.setOnMouseClick(e=>{const t=c.CollectedItemAnimation.clone().setLoop(0),n=new m.default(e,t,(new d.default).absolute());t.setOnAnimationEnd(()=>n.destroy()),this.addWidget(n)}),this.setOnUpdate(e=>{this.camera.x+=e/10})}}t.default=w},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(97)),i=s(n(17)),a=s(n(67));class o extends r.default{constructor(e){super(),this.app=e,this.camera=new i.default}addWidget(e){this.children.push(e),e.app=this.app,e.activity=this}render(e){this.isDestroyed||this.isHidden()||this.children.forEach(t=>{t.isAbsolute()||(e.save(),e.translate(-this.camera.x,-this.camera.y)),t.render(e),t.isAbsolute()||e.restore()})}getBoundingBox(){return a.default.from(0,this.app.canvas)}isAbsolute(){return!0}}t.default=o},function(e,t,n){"use strict";n.r(t),t.default=n.p+"dabbf6f039293f5fb010f850e89e6ea9.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"48d13a68747f46f4bea77f7edeb9c692.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"963d9fb14b4767e9fe51e0838781db46.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"ca4a0837d0daf434187bcad319aee5f0.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"17e5683a05c9fe1824ad11cbbe19afac.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"25fea8a198f2a3790636d991374e1260.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"3df5a9b4e9c2ee05b2724e98d7659e14.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"f4ae9b0f20451ce02e7fa7f78b3a1622.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"1d48b48b6ebf621fd4d5d51df21ab142.png"},function(e){e.exports=JSON.parse('[{"name":"a","w":8,"h":10,"sx":0,"sy":0},{"name":"b","w":8,"h":10,"sx":8,"sy":0},{"name":"c","w":8,"h":10,"sx":16,"sy":0},{"name":"d","w":8,"h":10,"sx":24,"sy":0},{"name":"e","w":8,"h":10,"sx":32,"sy":0},{"name":"f","w":8,"h":10,"sx":40,"sy":0},{"name":"g","w":8,"h":10,"sx":48,"sy":0},{"name":"h","w":8,"h":10,"sx":56,"sy":0},{"name":"i","w":8,"h":10,"sx":64,"sy":0},{"name":"j","w":8,"h":10,"sx":72,"sy":0},{"name":"k","w":8,"h":10,"sx":0,"sy":10},{"name":"l","w":8,"h":10,"sx":8,"sy":10},{"name":"m","w":8,"h":10,"sx":16,"sy":10},{"name":"n","w":8,"h":10,"sx":24,"sy":10},{"name":"o","w":8,"h":10,"sx":32,"sy":10},{"name":"p","w":8,"h":10,"sx":40,"sy":20},{"name":"q","w":8,"h":10,"sx":40,"sy":10},{"name":"r","w":8,"h":10,"sx":48,"sy":10},{"name":"s","w":8,"h":10,"sx":56,"sy":10},{"name":"t","w":8,"h":10,"sx":64,"sy":10},{"name":"u","w":8,"h":10,"sx":72,"sy":10},{"name":"v","w":8,"h":10,"sx":0,"sy":20},{"name":"w","w":8,"h":10,"sx":8,"sy":20},{"name":"x","w":8,"h":10,"sx":16,"sy":20},{"name":"y","w":8,"h":10,"sx":24,"sy":20},{"name":"z","w":8,"h":10,"sx":32,"sy":20},{"name":"0","w":8,"h":10,"sx":0,"sy":30},{"name":"1","w":8,"h":10,"sx":8,"sy":30},{"name":"2","w":8,"h":10,"sx":16,"sy":30},{"name":"3","w":8,"h":10,"sx":24,"sy":30},{"name":"4","w":8,"h":10,"sx":32,"sy":30},{"name":"5","w":8,"h":10,"sx":40,"sy":30},{"name":"6","w":8,"h":10,"sx":48,"sy":30},{"name":"7","w":8,"h":10,"sx":56,"sy":30},{"name":"8","w":8,"h":10,"sx":64,"sy":30},{"name":"9","w":8,"h":10,"sx":72,"sy":30},{"name":".","w":8,"h":10,"sx":0,"sy":40},{"name":",","w":8,"h":10,"sx":8,"sy":40},{"name":":","w":8,"h":10,"sx":16,"sy":40},{"name":"?","w":8,"h":10,"sx":24,"sy":40},{"name":"!","w":8,"h":10,"sx":32,"sy":40},{"name":"(","w":8,"h":10,"sx":40,"sy":40},{"name":")","w":8,"h":10,"sx":48,"sy":40},{"name":"+","w":8,"h":10,"sx":56,"sy":40},{"name":"-","w":8,"h":10,"sx":64,"sy":40}]')},function(e){e.exports=JSON.parse('[{"name":"blue","w":64,"h":64,"sx":0,"sy":0},{"name":"brown","w":64,"h":64,"sx":64,"sy":0},{"name":"pink","w":64,"h":64,"sx":128,"sy":0},{"name":"gray","w":64,"h":64,"sx":0,"sy":64},{"name":"green","w":64,"h":64,"sx":64,"sy":64},{"name":"purple","w":64,"h":64,"sx":128,"sy":64},{"name":"yellow","w":64,"h":64,"sx":128,"sy":0}]')},function(e){e.exports=JSON.parse('[{"name":"achievements","w":20,"h":20,"sx":0,"sy":0},{"name":"leaderboard","w":20,"h":20,"sx":20,"sy":0},{"name":"settings","w":20,"h":20,"sx":40,"sy":0},{"name":"sound_on","w":20,"h":20,"sx":60,"sy":0},{"name":"sound_off","w":20,"h":20,"sx":80,"sy":0},{"name":"prev","w":20,"h":20,"sx":0,"sy":20},{"name":"next","w":20,"h":20,"sx":20,"sy":20},{"name":"play","w":20,"h":20,"sx":40,"sy":20},{"name":"pause","w":20,"h":20,"sx":60,"sy":20},{"name":"reset","w":20,"h":20,"sx":80,"sy":20},{"name":"fullscreen_enter","w":20,"h":20,"sx":0,"sy":40},{"name":"fullscreen_exit","w":20,"h":20,"sx":20,"sy":40},{"name":"buttons","w":20,"h":20,"sx":40,"sy":40},{"name":"close","w":20,"h":20,"sx":0,"sy":60},{"name":"back","w":20,"h":20,"sx":20,"sy":60},{"name":"death","w":20,"h":20,"sx":40,"sy":60}]')},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CollectedItemAnimation=t.CharacterAppearingAnimation=t.DefaultCharacterAnimation=void 0;const r=n(68),i=s(n(101)),a=s(n(155)),o=s(n(156)),u=s(n(157));t.DefaultCharacterAnimation={idle:e=>new i.default(null!=e?e:null,a.default.idle),run:e=>new i.default(null!=e?e:null,a.default.run),hit:e=>new i.default(null!=e?e:null,a.default.hit)},t.CharacterAppearingAnimation={in:()=>new i.default(r.ParticleImages.get("CharacterAppearing"),u.default.in),out:()=>new i.default(r.ParticleImages.get("CharacterAppearing"),u.default.out)},t.CollectedItemAnimation=new i.default(r.ParticleImages.get("CollectedItem"),o.default)},function(e){e.exports=JSON.parse('{"idle":{"fps":60,"w":32,"h":32,"ox":15,"oy":31,"sx":0,"sy":0,"count":11},"run":{"fps":60,"w":32,"h":32,"ox":15,"oy":31,"sx":0,"sy":32,"count":12},"hit":{"fps":60,"w":32,"h":32,"ox":15,"oy":31,"sx":0,"sy":64,"count":7}}')},function(e){e.exports=JSON.parse('{"fps":60,"w":32,"h":32,"ox":0,"oy":0,"sx":0,"sy":0,"count":6}')},function(e){e.exports=JSON.parse('{"in":{"fps":90,"w":96,"h":96,"ox":16,"oy":32,"sx":0,"sy":0,"count":7},"out":{"fps":90,"w":96,"h":96,"ox":16,"oy":32,"sx":0,"sy":96,"count":7}}')},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(102)),i=n(99),a=s(n(67)),o=s(n(17)),u=s(n(47));class l extends r.default{constructor(e,t,n=new u.default){super(e,n),this.text=t}init(){this.onRender=e=>{const t=this.getScale()/2,n=8*t,s=10*t,r=this.text.split("\n"),a=r.length;for(let t=0;t<a;++t){const o=r[t],u=o.length;for(let r=0;r<u;++r){const l=i.TextSpriteSheet.get(o.charAt(r).toLowerCase());l&&l.draw(e,this.pos.subtract((u-2*r)*n,(a-2*t)*s),this.getScale())}}}}getBoundingBox(){const e=this.text.split("\n"),t=e.reduce((e,t)=>Math.max(e,t.length),0),n=o.default.from(t,e.length).multiply(8,10).multiply(this.getScale()/2);return a.default.from(this.pos).expand(n)}setText(e){return this.text=e,this}}t.default=l},function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(103)),i=s(n(17));class a extends r.default{init(){this.onRender=e=>{var t;if(!this.activity||!this.sprite)return;const n=(null!==(t=this.getDrawBox())&&void 0!==t?t:this.activity.getBoundingBox()).add(this.pos.mod(this.sprite)).expand(i.default.from(this.sprite).multiply(2)).floor();for(let t=n.min.x;t<n.max.x;t+=this.sprite.w)for(let s=n.min.y;s<n.max.y;s+=this.sprite.h)this.sprite.draw(e,new i.default(t,s),this.getScale())}}getBoundingBox(){return this.getDrawBox()}isAbsolute(){return!0}}t.default=a},function(e,t,n){
/*!
* screenfull
* v5.1.0 - 2020-12-24
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,s=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],s=0,r=n.length,i={};s<r;s++)if((e=n[s])&&e[1]in t){for(s=0;s<e.length;s++)i[n[0][s]]=e[s];return i}return!1}(),r={change:s.fullscreenchange,error:s.fullscreenerror},i={request:function(e,n){return new Promise(function(r,i){var a=function(){this.off("change",a),r()}.bind(this);this.on("change",a);var o=(e=e||t.documentElement)[s.requestFullscreen](n);o instanceof Promise&&o.then(a).catch(i)}.bind(this))},exit:function(){return new Promise(function(e,n){if(this.isFullscreen){var r=function(){this.off("change",r),e()}.bind(this);this.on("change",r);var i=t[s.exitFullscreen]();i instanceof Promise&&i.then(r).catch(n)}else e()}.bind(this))},toggle:function(e,t){return this.isFullscreen?this.exit():this.request(e,t)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var s=r[e];s&&t.addEventListener(s,n,!1)},off:function(e,n){var s=r[e];s&&t.removeEventListener(s,n,!1)},raw:s};s?(Object.defineProperties(i,{isFullscreen:{get:function(){return Boolean(t[s.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[s.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(t[s.fullscreenEnabled])}}}),n?e.exports=i:window.screenfull=i):n?e.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,