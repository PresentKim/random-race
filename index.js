/*! For license information please see index.js.LICENSE.txt */
(()=>{var e,t,n={9200:e=>{"use strict";e.exports=JSON.parse('{"idle":{"fps":60,"w":32,"h":32,"ox":15,"oy":31,"sx":0,"sy":0,"count":11},"run":{"fps":60,"w":32,"h":32,"ox":15,"oy":31,"sx":0,"sy":32,"count":12},"hit":{"fps":60,"w":32,"h":32,"ox":15,"oy":31,"sx":0,"sy":64,"count":7}}')},4796:e=>{"use strict";e.exports=JSON.parse('{"in":{"fps":90,"w":96,"h":96,"ox":16,"oy":32,"sx":0,"sy":0,"count":7},"out":{"fps":90,"w":96,"h":96,"ox":16,"oy":32,"sx":0,"sy":96,"count":7}}')},6978:e=>{"use strict";e.exports=JSON.parse('{"fps":60,"w":32,"h":32,"ox":0,"oy":0,"sx":0,"sy":0,"count":6}')},928:e=>{"use strict";e.exports=JSON.parse('[{"name":"blue","w":64,"h":64,"sx":0,"sy":0},{"name":"brown","w":64,"h":64,"sx":64,"sy":0},{"name":"pink","w":64,"h":64,"sx":128,"sy":0},{"name":"gray","w":64,"h":64,"sx":0,"sy":64},{"name":"green","w":64,"h":64,"sx":64,"sy":64},{"name":"purple","w":64,"h":64,"sx":128,"sy":64},{"name":"yellow","w":64,"h":64,"sx":128,"sy":0}]')},4771:e=>{"use strict";e.exports=JSON.parse('[{"name":"start_game","w":76,"h":14,"sx":0,"sy":0},{"name":"description","w":84,"h":14,"sx":0,"sy":14}]')},4663:e=>{"use strict";e.exports=JSON.parse('[{"name":"achievements","w":20,"h":20,"sx":0,"sy":0},{"name":"leaderboard","w":20,"h":20,"sx":20,"sy":0},{"name":"settings","w":20,"h":20,"sx":40,"sy":0},{"name":"sound_on","w":20,"h":20,"sx":60,"sy":0},{"name":"sound_off","w":20,"h":20,"sx":80,"sy":0},{"name":"prev","w":20,"h":20,"sx":0,"sy":20},{"name":"next","w":20,"h":20,"sx":20,"sy":20},{"name":"play","w":20,"h":20,"sx":40,"sy":20},{"name":"pause","w":20,"h":20,"sx":60,"sy":20},{"name":"reset","w":20,"h":20,"sx":80,"sy":20},{"name":"fullscreen_enter","w":20,"h":20,"sx":0,"sy":40},{"name":"fullscreen_exit","w":20,"h":20,"sx":20,"sy":40},{"name":"buttons","w":20,"h":20,"sx":40,"sy":40},{"name":"close","w":20,"h":20,"sx":0,"sy":60},{"name":"back","w":20,"h":20,"sx":20,"sy":60},{"name":"death","w":20,"h":20,"sx":40,"sy":60}]')},8615:e=>{"use strict";e.exports=JSON.parse('[{"name":"a","w":8,"h":10,"sx":0,"sy":0},{"name":"b","w":8,"h":10,"sx":8,"sy":0},{"name":"c","w":8,"h":10,"sx":16,"sy":0},{"name":"d","w":8,"h":10,"sx":24,"sy":0},{"name":"e","w":8,"h":10,"sx":32,"sy":0},{"name":"f","w":8,"h":10,"sx":40,"sy":0},{"name":"g","w":8,"h":10,"sx":48,"sy":0},{"name":"h","w":8,"h":10,"sx":56,"sy":0},{"name":"i","w":8,"h":10,"sx":64,"sy":0},{"name":"j","w":8,"h":10,"sx":72,"sy":0},{"name":"k","w":8,"h":10,"sx":0,"sy":10},{"name":"l","w":8,"h":10,"sx":8,"sy":10},{"name":"m","w":8,"h":10,"sx":16,"sy":10},{"name":"n","w":8,"h":10,"sx":24,"sy":10},{"name":"o","w":8,"h":10,"sx":32,"sy":10},{"name":"p","w":8,"h":10,"sx":40,"sy":20},{"name":"q","w":8,"h":10,"sx":40,"sy":10},{"name":"r","w":8,"h":10,"sx":48,"sy":10},{"name":"s","w":8,"h":10,"sx":56,"sy":10},{"name":"t","w":8,"h":10,"sx":64,"sy":10},{"name":"u","w":8,"h":10,"sx":72,"sy":10},{"name":"v","w":8,"h":10,"sx":0,"sy":20},{"name":"w","w":8,"h":10,"sx":8,"sy":20},{"name":"x","w":8,"h":10,"sx":16,"sy":20},{"name":"y","w":8,"h":10,"sx":24,"sy":20},{"name":"z","w":8,"h":10,"sx":32,"sy":20},{"name":"0","w":8,"h":10,"sx":0,"sy":30},{"name":"1","w":8,"h":10,"sx":8,"sy":30},{"name":"2","w":8,"h":10,"sx":16,"sy":30},{"name":"3","w":8,"h":10,"sx":24,"sy":30},{"name":"4","w":8,"h":10,"sx":32,"sy":30},{"name":"5","w":8,"h":10,"sx":40,"sy":30},{"name":"6","w":8,"h":10,"sx":48,"sy":30},{"name":"7","w":8,"h":10,"sx":56,"sy":30},{"name":"8","w":8,"h":10,"sx":64,"sy":30},{"name":"9","w":8,"h":10,"sx":72,"sy":30},{"name":".","w":8,"h":10,"sx":0,"sy":40},{"name":",","w":8,"h":10,"sx":8,"sy":40},{"name":":","w":8,"h":10,"sx":16,"sy":40},{"name":"?","w":8,"h":10,"sx":24,"sy":40},{"name":"!","w":8,"h":10,"sx":32,"sy":40},{"name":"(","w":8,"h":10,"sx":40,"sy":40},{"name":")","w":8,"h":10,"sx":48,"sy":40},{"name":"+","w":8,"h":10,"sx":56,"sy":40},{"name":"-","w":8,"h":10,"sx":64,"sy":40}]')},4377:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(7585)),i=n(5440);t.default=class{constructor(e){this.activities=[],this.canvas=e;const t=this.canvas.getContext("2d");if(!t)throw"Can't get context from canvas";this.ctx=t,this.mouseVec=new r.default,this.elapsedSecs=0,this.lastUpdate=-1,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.mozImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.canvas.onclick=e=>{if(0!==e.button)return;const t=i.getCanvasMousePos(this.canvas,e.pageX,e.pageY,1024);this.activities.slice().reverse().some((e=>e.mouseClick(t,t.add(e.camera))))},this.canvas.onmousemove=e=>{this.mouseVec=i.getCanvasMousePos(this.canvas,e.pageX,e.pageY,1024)}}update(){const e=Date.now();if(-1!==this.lastUpdate){const t=-1===this.lastUpdate?0:e-this.lastUpdate;this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.activities=this.activities.filter((e=>!e.isDestroyed&&(e.update(t),e.render(this.ctx),!0)))}this.lastUpdate=e,this.activities.slice().reverse().some((e=>e.mouseHover(this.mouseVec,this.mouseVec.add(e.camera)))),i.requestAnimationFrame(this.update.bind(this))}addActivity(e){this.activities.push(e)}}},8235:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(4989)),i=s(n(7585)),a=s(n(2343));class o extends r.default{constructor(e){super(),this.app=e,this.camera=new i.default}addWidget(e){this.children.push(e),e.app=this.app,e.activity=this}render(e){this.isDestroyed||this.isHidden()||this.children.forEach((t=>{t.isAbsolute()||(e.save(),e.translate(-this.camera.x,-this.camera.y)),t.render(e),t.isAbsolute()||e.restore()}))}getBoundingBox(){return a.default.from(0,this.app.canvas)}isAbsolute(){return!0}}t.default=o},5031:function(e,t,n){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&s(t,e,n);return r(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=a(n(8235)),u=n(9796),l=n(9348),d=n(5310),c=a(n(8534)),h=a(n(7585)),f=a(n(9213)),p=a(n(7474)),m=a(n(8711)),g=a(n(5854)),y=i(n(577)),x=(e,t)=>(t.renderOption.scale(t.isHover()?3.3:3),!0);class w extends o.default{constructor(e){super(e);const t=new p.default(null,l.BackgroundSpriteSheet.random()),n=d.DefaultCharacterAnimation.idle(u.DefaultCharacterImages.get("PinkMan")),s=d.DefaultCharacterAnimation.run(u.DefaultCharacterImages.get("PinkMan"));n.setLoop(4).setOnAnimationEnd((()=>r.sprite=s.setLoop(6))),s.setLoop(6).setOnAnimationEnd((()=>r.sprite=n.setLoop(4)));const r=new m.default(h.default.from(this.app.canvas).multiply(.25,.175),s,(new c.default).absolute().scale(3)),i=new f.default(h.default.from(this.app.canvas).multiply(.5,.1),"random race",(new c.default).absolute().scale(5)),a=new m.default(h.default.from(this.app.canvas).multiply(.5,.3),l.ButtonSpriteSheet.get("start_game"),(new c.default).absolute().scale(7)),o=new m.default(h.default.from(this.app.canvas).multiply(.5,.5),l.ButtonSpriteSheet.get("description"),(new c.default).absolute().scale(6)),w=new m.default(h.default.from(this.app.canvas).multiply(.95,.1),l.IconSpriteSheet.get("reset"),(new c.default).absolute().scale(3));if(this.addWidget(t.setOnUpdate((e=>{t.pos.x-=e/10}))),this.addWidget(r.setOnMouseClick((e=>{n.fps-=3,s.fps-=3,n.fps<0&&(n.fps=100,s.fps=100),this.addWidget(new f.default(e.add(80*Math.random()-40,0),100===n.fps?"-100":"+3",(new c.default).absolute()).setRenderOption((new c.default).scale(2).absolute().hue(360*Math.random()).brightness(6).contrast(2)).setOnUpdate(((e,t)=>{t instanceof f.default?(t.pos.y-=e/20,t.pos.y<0&&t.destroy()):t.destroy()})))}))),this.addWidget(i),this.addWidget(a.setOnUpdate(((e,t)=>(t.renderOption.scale(t.isHover()?7.3:7),!0)))),this.addWidget(o.setOnUpdate(((e,t)=>(t.renderOption.scale(t.isHover()?6.3:6),!0)))),this.addWidget(w.setOnMouseClick((()=>{var e,i;return t.setSprite(l.BackgroundSpriteSheet.random()),r.setSprite(d.DefaultCharacterAnimation.hit(null!==(i=null===(e=r.sprite)||void 0===e?void 0:e.getImage())&&void 0!==i?i:null).setLoop(1).setOnAnimationEnd((()=>{r.setSprite(d.CharacterAppearingAnimation.in().setLoop(0).setOnAnimationEnd((()=>{const e=u.DefaultCharacterImages.random();n.setImage(e),s.setImage(e),r.sprite=n.setLoop(1)})))}))),!0})).setOnUpdate(x)),y.isEnabled){const e=y.default,t=new m.default(w.pos.subtract(72,0),l.IconSpriteSheet.get("fullscreen_enter"),(new c.default).absolute().scale(3));this.addWidget(t.setOnMouseClick((()=>e.toggle(document.body)||!0)).setOnUpdate(x)),e.on("change",(()=>{var n;t.sprite=null!==(n=l.IconSpriteSheet.get(e.isFullscreen?"fullscreen_exit":"fullscreen_enter"))&&void 0!==n?n:null}))}for(let e=0;e<30;++e){const e=new m.default(new h.default(Math.random()*this.app.canvas.width,this.app.canvas.height));this.addWidget(e.setOnUpdate((t=>{var n,s;const r=this.getBoundingBox().add(this.camera).maxX;(null!==(s=null===(n=e.getBoundingBox())||void 0===n?void 0:n.minX)&&void 0!==s?s:0)>r&&(e.pos.x=this.camera.x,e.sprite=null),e.sprite||(e.renderOption.scale(4*Math.random()+2.5),e.sprite=d.DefaultCharacterAnimation.run(u.DefaultCharacterImages.random()).setFps(60*Math.random()+30)),e.sprite instanceof g.default&&-1===e.sprite.loop&&(e.pos.x+=t/5*(60/e.sprite.fps)),e.sprite.update(t)})).setOnMouseClick((()=>{if(e.sprite instanceof g.default&&-1===e.sprite.loop)return e.setSprite(d.DefaultCharacterAnimation.hit(e.sprite.getImage()).setLoop(0).setOnAnimationEnd((()=>{e.setSprite(d.CharacterAppearingAnimation.out().setLoop(0).setOnAnimationEnd((()=>{e.pos.x=this.camera.x,e.sprite=null})))}))),!0})))}new URLSearchParams(window.location.search).get("renderMouseClick")&&this.setOnMouseClick((e=>{const t=d.CollectedItemAnimation.clone().setLoop(0),n=new m.default(e,t,(new c.default).absolute());t.setOnAnimationEnd((()=>n.destroy())),this.addWidget(n)})),this.setOnUpdate((e=>{this.camera.x+=e/10}))}}t.default=w},5310:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CollectedItemAnimation=t.CharacterAppearingAnimation=t.DefaultCharacterAnimation=void 0;const r=n(9796),i=s(n(5854)),a=s(n(9200)),o=s(n(6978)),u=s(n(4796));t.DefaultCharacterAnimation={idle:e=>new i.default(null!=e?e:null,a.default.idle),run:e=>new i.default(null!=e?e:null,a.default.run),hit:e=>new i.default(null!=e?e:null,a.default.hit)},t.CharacterAppearingAnimation={in:()=>new i.default(r.ParticleImages.get("CharacterAppearing"),u.default.in),out:()=>new i.default(r.ParticleImages.get("CharacterAppearing"),u.default.out)},t.CollectedItemAnimation=new i.default(r.ParticleImages.get("CollectedItem"),o.default)},9796:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ParticleImages=t.CollectedItemImage=t.CharacterAppearingImage=t.CharacterImages=t.DefaultCharacterImages=t.VirtualGuyImage=t.NinjaFrogImage=t.MaskManImage=t.PinkManImage=t.UiImages=t.ButtonImage=t.IconImage=t.BackgroundImage=t.TextImage=void 0;const r=s(n(9283)),i=s(n(5765)),a=s(n(1579)),o=s(n(1304)),u=s(n(9095)),l=s(n(8399)),d=s(n(7190)),c=s(n(1385)),h=s(n(7449)),f=s(n(131)),p=s(n(5309));t.TextImage=i.default,t.BackgroundImage=a.default,t.IconImage=o.default,t.ButtonImage=u.default,t.UiImages={Text:t.TextImage,Background:t.BackgroundImage,Icon:t.IconImage,button:t.ButtonImage},t.PinkManImage=l.default,t.MaskManImage=d.default,t.NinjaFrogImage=c.default,t.VirtualGuyImage=h.default,t.DefaultCharacterImages=(new r.default).set("PinkMan",t.PinkManImage).set("MaskMan",t.MaskManImage).set("NinjaFrog",t.NinjaFrogImage).set("VirtualGuy",t.VirtualGuyImage),t.CharacterImages=new r.default(t.DefaultCharacterImages.entries()),t.CharacterAppearingImage=f.default,t.CollectedItemImage=p.default,t.ParticleImages=(new r.default).set("CharacterAppearing",t.CharacterAppearingImage).set("CollectedItem",t.CollectedItemImage)},9348:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonSpriteSheet=t.IconSpriteSheet=t.BackgroundSpriteSheet=t.TextSpriteSheet=t.loadSpriteSheet=void 0;const r=n(9796),i=s(n(5241)),a=s(n(9283)),o=s(n(8615)),u=s(n(928)),l=s(n(4663)),d=s(n(4771));function c(e,t){const n=new a.default;return t.forEach((t=>{var s;n.set(null!==(s=t.name)&&void 0!==s?s:n.size+"",new i.default(t).setImage(e))})),n}t.loadSpriteSheet=c,t.TextSpriteSheet=c(r.TextImage,o.default),t.BackgroundSpriteSheet=c(r.BackgroundImage,u.default),t.IconSpriteSheet=c(r.IconImage,l.default),t.ButtonSpriteSheet=c(r.ButtonImage,d.default)},8022:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(4377)),i=s(n(5031));document.addEventListener("DOMContentLoaded",(()=>{const e=document.createElement("canvas");e.width=1024,e.height=576,e.id="game",document.body.append(e);const t=new r.default(e);t.addActivity(new i.default(t)),t.update()}))},5241:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(7585));class i{constructor(e){const{w:t,h:n,sx:s,sy:r,ox:i,oy:a}=e;this.w=null!=t?t:0,this.h=null!=n?n:0,this.sx=null!=s?s:0,this.sy=null!=r?r:0,this.ox=null!=i?i:0,this.oy=null!=a?a:0,this._image=null}getImage(){return this._image}setImage(e){return e instanceof HTMLImageElement?this._image=e:"string"==typeof e?(this._image=new Image,this._image.src=e):this._image=null,this}update(e){}draw(e,t,n=1){const s=this.getImage();if(!s||!s.complete||0===s.naturalHeight)return;const i=r.default.from(t);e.save(),e.translate(i.x,i.y),e.drawImage(s,this.sx,this.sy,this.w,this.h,-this.ox*n/2,-this.oy*n/2,this.w*n,this.h*n),e.restore()}static from(e,t,n,s,r,a){return new i({w:e,h:t,sx:n,sy:s,ox:r,oy:a})}}t.default=i},5854:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(5241));class i extends r.default{constructor(e,t){const{fps:n,count:s}=t;super(t),this.fps=n,this.frames=[],this.count=0,this.loop=-1,this.elapsedSecs=0,this.onAnimationEnd=()=>{},this.setImage(e);for(let t=0;t<s;++t)this.frames[t]=r.default.from(this.w,this.h,this.sx+t*this.w,this.sy,this.ox,this.oy).setImage(e),++this.count}setImage(e){return super.setImage(e),this.frames.forEach((t=>t.setImage(e))),this}getCurrentFrame(){let e=this.frames[Math.floor(this.elapsedSecs/this.fps)];return e||(0!==this.loop?(-1!==this.loop&&--this.loop,this.elapsedSecs=0,e=this.frames[0]):(e=this.frames[this.frames.length-1],this.onAnimationEnd&&this.onAnimationEnd(this))),null!=e?e:null}setFps(e=60){return this.fps=e,this}setLoop(e=-1){return this.loop=e,this}setOnAnimationEnd(e){return this.onAnimationEnd=e,this}update(e){this.elapsedSecs+=e}draw(e,t,n=1){const s=this.getCurrentFrame();null!==s&&s.draw(e,t,n)}reset(){this.elapsedSecs=0}clone(){return new i(this.getImage(),this)}}t.default=i},2343:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(7585));class i{constructor(e=new r.default,t=new r.default){this.min=r.default.from(e),this.max=r.default.from(t),this.min.x>this.max.x&&([this.min.x,this.max.x]=[this.max.x,this.min.x]),this.min.y>this.max.y&&([this.min.y,this.max.y]=[this.max.y,this.min.y])}get minX(){return this.min.x}get minY(){return this.min.y}get maxX(){return this.max.x}get maxY(){return this.max.y}get xLength(){return this.max.x-this.min.x}get yLength(){return this.max.y-this.min.y}isInside(e,t){const n=r.default.from(e,t);return this.min.x<n.x&&this.max.x>n.x&&this.min.y<n.y&&this.max.y>n.y}add(e,t){const n=r.default.from(e,t);return new i(this.min.add(n),this.max.add(n))}subtract(e,t){const n=r.default.from(e,t);return new i(this.min.subtract(n),this.max.subtract(n))}expand(e,t){const n=r.default.from(e,t);return new i(this.min.subtract(n),this.max.add(n))}contract(e,t){const n=r.default.from(e,t);return new i(this.min.add(n),this.max.subtract(n))}ceil(){return i.from(this.min.ceil(),this.max.ceil())}floor(){return i.from(this.min.floor(),this.max.floor())}round(){return i.from(this.min.round(),this.max.round())}clone(){return i.from(this.min,this.max)}static from(e,t,n,s){return new i(r.default.from(e,n),r.default.from(void 0===t?e:t,void 0===s?n:s))}}t.default=i},4989:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(8534));t.default=class{constructor(e=new r.default){this.children=[],this.renderOption=null!=e?e:new r.default,this.isDestroyed=!1,this.hoverOutDelay=0,this.onUpdate=()=>{},this.onRender=()=>{},this.onDestroy=()=>{},this.onMouseClick=()=>!1,this.onMouseHover=()=>!1,this.onMouseHoverOut=()=>{},this.init()}init(){}update(e){this.children=this.children.filter((t=>!t.isDestroyed&&(t.update(e),!0))),this.hoverOutDelay>0&&(this.hoverOutDelay-=e,this.hoverOutDelay<=0&&(this.hoverOutDelay=0,this.onMouseHoverOut(this))),this.onUpdate(e,this)}render(e){if(!this.isDestroyed&&!this.isHidden()){if(e.save(),this.renderOption.applyFilter(e),this.children.forEach((t=>{e.save(),t.render(e),e.restore()})),this.onRender(e,this),new URLSearchParams(window.location.search).get("renderBoundingBox")){const t=this.getBoundingBox();t&&(e.beginPath(),e.moveTo(t.minX,t.minY),e.lineTo(t.minX,t.maxY),e.lineTo(t.maxX,t.maxY),e.lineTo(t.maxX,t.minY),e.closePath(),e.stroke())}e.restore()}}mouseClick(e,t){if(this.isDestroyed)return!1;const n=this.getBoundingBox();return!(n&&!n.isInside(this.isAbsolute()?e:t))&&(this.onMouseClick(e,t,this)||-1!==this.children.slice().reverse().findIndex((n=>n.mouseClick(e,t))))}mouseHover(e,t){if(this.isDestroyed)return!1;const n=this.getBoundingBox();return!(!n||!n.isInside(this.isAbsolute()?e:t))&&(this.hoverOutDelay=20,this.onMouseHover(e,t,this)||-1!==this.children.slice().reverse().findIndex((n=>n.mouseHover(e,t))))}destroy(){this.isDestroyed=!0,this.onDestroy(this)}setOnUpdate(e){return this.onUpdate=e,this}setOnRender(e){return this.onRender=e,this}setOnMouseClick(e){return this.onMouseClick=e,this}setOnMouseHover(e){return this.onMouseHover=e,this}setOnMouseHoverOut(e){return this.onMouseHoverOut=e,this}setRenderOption(e){return this.renderOption=e,this}isAbsolute(){return this.renderOption._absolute}isHidden(){return this.renderOption._hidden}isHover(){return this.hoverOutDelay>0}getScale(){return this.renderOption._scale}getDrawBox(){return this.renderOption._drawBox}getBoundingBox(){return null}}},9283:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n extends Map{random(){const e=Array.from(this.values());return e[Math.floor(e.length*Math.random()<<0)]}}t.default=n},8534:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this._hidden=!1,this._absolute=!1,this._scale=1,this._rotate=0,this._hue=0,this._brightness=1,this._contrast=1,this._grayscale=!1,this._drawBox=null}hidden(e=!0){return this._hidden=e,this}absolute(e=!0){return this._absolute=e,this}scale(e=1){return this._scale=e,this}rotate(e=0){return this._rotate=e,this}hue(e=0){return this._hue=e,this}brightness(e=1){return this._brightness=e,this}contrast(e=1){return this._contrast=e,this}grayscale(e=!0){return this._grayscale=e,this}drawBox(e=null){return this._drawBox=e,this}applyFilter(e){let t="none"===e.filter?"":e.filter;0!==this._rotate&&e.rotate(-this._rotate),0!==this._hue&&(t+=` hue-rotate(${this._hue}deg) `),1!==this._brightness&&(t+=` brightness(${this._brightness}) `),1!==this._contrast&&(t+=` contrast(${this._contrast}) `),this._grayscale&&(t+=" grayscale(1) "),this._drawBox&&(e.rect(this._drawBox.minX,this._drawBox.minY,this._drawBox.maxX,this._drawBox.maxY),e.clip(),e.clearRect(this._drawBox.minX,this._drawBox.minY,this._drawBox.maxX,this._drawBox.maxY)),e.filter=t}}},7585:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e=0,t=0){this.x=e,this.y=t}add(e=0,t){const s=n.from(e,t);return new n(this.x+s.x,this.y+s.y)}subtract(e=0,t){const s=n.from(e,t);return new n(this.x-s.x,this.y-s.y)}multiply(e=0,t){const s=n.from(e,t);return new n(this.x*s.x,this.y*s.y)}divide(e=0,t){const s=n.from(e,t);return new n(this.x/s.x,this.y/s.y)}mod(e=0,t){const s=n.from(e,t);return new n(this.x%s.x,this.y%s.y)}ceil(){return new n(Math.ceil(this.x),Math.ceil(this.y))}floor(){return new n(Math.floor(this.x),Math.floor(this.y))}round(){return new n(Math.fround(this.x),Math.fround(this.y))}abs(){return new n(Math.abs(this.x),Math.abs(this.y))}reverse(){throw new n(-this.x,-this.y)}flip(){throw new n(this.y,this.x)}clone(){return new n(this.x,this.y)}distance(e=0,t){const s=n.from(e,t);return Math.sqrt(this.distanceSquared(s))}distanceSquared(e=0,t){const s=n.from(e,t);return(this.x-s.x)**2+(this.y-s.y)**2}static from(e=0,t){return"number"==typeof e?new n(e,"number"==typeof t?t:e):e instanceof n?e:e instanceof HTMLCanvasElement||e instanceof HTMLImageElement?new n(e.width,e.height):new n(e.w,e.h)}}t.default=n},5440:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getCanvasMousePos=t.requestAnimationFrame=void 0;const r=s(n(7585));t.requestAnimationFrame=(window.requestAnimationFrame||window.webkitRequestAnimationFrame||(e=>window.setTimeout(e,1e3/60))).bind(window),t.getCanvasMousePos=(e,t,n,s)=>new r.default(t,n).subtract(e.offsetLeft,e.offsetTop).multiply(s/e.offsetWidth)},7474:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(8711)),i=s(n(7585));class a extends r.default{init(){this.onRender=e=>{var t;if(!this.activity||!this.sprite)return;const n=(null!==(t=this.getDrawBox())&&void 0!==t?t:this.activity.getBoundingBox()).add(this.pos.mod(this.sprite)).expand(i.default.from(this.sprite).multiply(2)).floor();for(let t=n.min.x;t<n.max.x;t+=this.sprite.w)for(let s=n.min.y;s<n.max.y;s+=this.sprite.h)this.sprite.draw(e,new i.default(t,s),this.getScale())}}getBoundingBox(){return this.getDrawBox()}isAbsolute(){return!0}}t.default=a},8711:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(5864)),i=s(n(2343)),a=s(n(7585)),o=s(n(8534));class u extends r.default{constructor(e,t=null,n=new o.default){super(e,n),this.sprite=t}init(){this.onRender=e=>{if(!this.sprite||!this.sprite.getImage())return;const t=a.default.from(this.sprite).multiply(this.getScale()/2);this.sprite.draw(e,this.pos.subtract(t),this.getScale())},this.onUpdate=e=>{var t;null===(t=this.sprite)||void 0===t||t.update(e)}}getBoundingBox(){if(!this.sprite)return null;const e=a.default.from(this.sprite).multiply(this.getScale()/2);return i.default.from(this.pos.subtract(new a.default(this.sprite.ox,this.sprite.oy).multiply(this.getScale()/2))).expand(e)}setSprite(e){return this.sprite=e,this}}t.default=u},9213:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(5864)),i=n(9348),a=s(n(2343)),o=s(n(7585)),u=s(n(8534));class l extends r.default{constructor(e,t,n=new u.default){super(e,n),this.text=t}init(){this.onRender=e=>{const t=this.getScale()/2,n=8*t,s=10*t,r=this.text.split("\n"),a=r.length;for(let t=0;t<a;++t){const o=r[t],u=o.length;for(let r=0;r<u;++r){const l=i.TextSpriteSheet.get(o.charAt(r).toLowerCase());l&&l.draw(e,this.pos.subtract((u-2*r)*n,(a-2*t)*s),this.getScale())}}}}getBoundingBox(){const e=this.text.split("\n"),t=e.reduce(((e,t)=>Math.max(e,t.length)),0),n=o.default.from(t,e.length).multiply(8,10).multiply(this.getScale()/2);return a.default.from(this.pos).expand(n)}setText(e){return this.text=e,this}}t.default=l},5864:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(7585)),i=s(n(4989)),a=s(n(8534));class o extends i.default{constructor(e=null,t=new a.default){super(t),this.app=null,this.activity=null,this.pos=null!=e?e:new r.default}setPos(e){return this.pos=e,this}}t.default=o},7190:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"17e5683a05c9fe1824ad11cbbe19afac.png"},1385:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"25fea8a198f2a3790636d991374e1260.png"},8399:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"ca4a0837d0daf434187bcad319aee5f0.png"},7449:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"3df5a9b4e9c2ee05b2724e98d7659e14.png"},131:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"f4ae9b0f20451ce02e7fa7f78b3a1622.png"},5309:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"1d48b48b6ebf621fd4d5d51df21ab142.png"},1579:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"48d13a68747f46f4bea77f7edeb9c692.png"},9095:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"89273dd68fcf9f3042c0620ed2ea1469.png"},1304:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"963d9fb14b4767e9fe51e0838781db46.png"},5765:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s=n.p+"dabbf6f039293f5fb010f850e89e6ea9.png"},577:e=>{!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,s=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],s=0,r=n.length,i={};s<r;s++)if((e=n[s])&&e[1]in t){for(s=0;s<e.length;s++)i[n[0][s]]=e[s];return i}return!1}(),r={change:s.fullscreenchange,error:s.fullscreenerror},i={request:function(e,n){return new Promise(function(r,i){var a=function(){this.off("change",a),r()}.bind(this);this.on("change",a);var o=(e=e||t.documentElement)[s.requestFullscreen](n);o instanceof Promise&&o.then(a).catch(i)}.bind(this))},exit:function(){return new Promise(function(e,n){if(this.isFullscreen){var r=function(){this.off("change",r),e()}.bind(this);this.on("change",r);var i=t[s.exitFullscreen]();i instanceof Promise&&i.then(r).catch(n)}else e()}.bind(this))},toggle:function(e,t){return this.isFullscreen?this.exit():this.request(e,t)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var s=r[e];s&&t.addEventListener(s,n,!1)},off:function(e,n){var s=r[e];s&&t.removeEventListener(s,n,!1)},raw:s};s?(Object.defineProperties(i,{isFullscreen:{get:function(){return Boolean(t[s.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[s.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(t[s.fullscreenEnabled])}}}),n?e.exports=i:window.screenfull=i):n?e.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}()}},s={};function r(e){var t=s[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var i=s[e]={exports:{}};try{var a={id:e,module:i,factory:n[e],require:r};r.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require)}catch(e){throw i.error=e,e}return i.exports}r.m=n,r.c=s,r.i=[],r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.hu=e=>e+"."+r.h()+".hot-update.js",r.hmrF=()=>"index."+r.h()+".hot-update.json",r.h=()=>"44c0c14112e0ed6e2afa",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="random-race:",r.l=(n,s,i,a)=>{if(e[n])e[n].push(s);else{var o,u;if(void 0!==i)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var c=l[d];if(c.getAttribute("src")==n||c.getAttribute("data-webpack")==t+i){o=c;break}}o||(u=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,r.nc&&o.setAttribute("nonce",r.nc),o.setAttribute("data-webpack",t+i),o.src=n),e[n]=[s];var h=(t,s)=>{o.onerror=o.onload=null,clearTimeout(f);var r=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach((e=>e(s))),t)return t(s)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),u&&document.head.appendChild(o)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,t,n,s,i={},a=r.c,o=[],u=[],l="idle";function d(e){l=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}function c(e){if(0===t.length)return e();var n=t;return t=[],Promise.all(n).then((function(){return c(e)}))}function h(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return d("check"),r.hmrM().then((function(s){if(!s)return d(m()?"ready":"idle"),null;d("prepare");var i=[];return t=[],n=[],Promise.all(Object.keys(r.hmrC).reduce((function(e,t){return r.hmrC[t](s.c,s.r,s.m,e,n,i),e}),[])).then((function(){return c((function(){return e?p(e):(d("ready"),i)}))}))}))}function f(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):p(e)}function p(e){e=e||{},m();var t=n.map((function(t){return t(e)}));n=void 0;var r,i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return d("abort"),Promise.resolve().then((function(){throw i[0]}));d("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),d("apply");var a=function(e){r||(r=e)},o=[];return t.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var n=0;n<t.length;n++)o.push(t[n])}})),r?(d("fail"),Promise.resolve().then((function(){throw r}))):s?p(e).then((function(e){return o.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(d("idle"),Promise.resolve(o))}function m(){if(s)return n||(n=[]),Object.keys(r.hmrI).forEach((function(e){s.forEach((function(t){r.hmrI[e](t,n)}))})),s=void 0,!0}r.hmrD=i,r.i.push((function(p){var m,g,y,x=p.module,w=function(n,s){var r=a[s];if(!r)return n;var i=function(t){if(r.hot.active){if(a[t]){var i=a[t].parents;-1===i.indexOf(s)&&i.push(s)}else o=[s],e=t;-1===r.children.indexOf(t)&&r.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+s),o=[];return n(t)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var h in n)Object.prototype.hasOwnProperty.call(n,h)&&"e"!==h&&Object.defineProperty(i,h,u(h));return i.e=function(e){return function(e){switch(l){case"ready":return d("prepare"),t.push(e),c((function(){d("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(n.e(e))},i}(p.require,p.id);x.hot=(m=p.id,g=x,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){o=g.parents.slice(),e=m,r(m)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var s=0;s<e.length;s++)y._acceptedDependencies[e[s]]=t||function(){},y._acceptedErrorHandlers[e[s]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":n=[],Object.keys(r.hmrI).forEach((function(e){r.hmrI[e](m,n)})),d("ready");break;case"ready":Object.keys(r.hmrI).forEach((function(e){r.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(s=s||[]).push(m)}},check:h,apply:f,status:function(e){if(!e)return l;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:i[m]},e=void 0,y),x.parents=o,x.children=[],o=[],p.require=w})),r.hmrC={},r.hmrI={}})(),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e,t,n,s,i={826:0},a={};function o(e){return new Promise(((t,n)=>{a[e]=t;var s=r.p+r.hu(e),i=new Error;r.l(s,(t=>{if(a[e]){a[e]=void 0;var s=t&&("load"===t.type?"missing":t.type),r=t&&t.target&&t.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+s+": "+r+")",i.name="ChunkLoadError",i.type=s,i.request=r,n(i)}}))}))}function u(a){function o(e){for(var t=[e],n={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var i=s.pop(),a=i.id,o=i.chain,l=r.c[a];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:a};for(var d=0;d<l.parents.length;d++){var c=l.parents[d],h=r.c[c];if(h){if(h.hot._declinedDependencies[a])return{type:"declined",chain:o.concat([c]),moduleId:a,parentId:c};-1===t.indexOf(c)&&(h.hot._acceptedDependencies[a]?(n[c]||(n[c]=[]),u(n[c],[a])):(delete n[c],t.push(c),s.push({chain:o.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var s=t[n];-1===e.indexOf(s)&&e.push(s)}}r.f&&delete r.f.jsonpHmr,e=void 0;var l={},d=[],c={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in t)if(r.o(t,f)){var p,m=t[f],g=!1,y=!1,x=!1,w="";switch((p=m?o(f):{type:"disposed",moduleId:f}).chain&&(w="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":a.onDeclined&&a.onDeclined(p),a.ignoreDeclined||(g=new Error("Aborted because of self decline: "+p.moduleId+w));break;case"declined":a.onDeclined&&a.onDeclined(p),a.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+w));break;case"unaccepted":a.onUnaccepted&&a.onUnaccepted(p),a.ignoreUnaccepted||(g=new Error("Aborted because "+f+" is not accepted"+w));break;case"accepted":a.onAccepted&&a.onAccepted(p),y=!0;break;case"disposed":a.onDisposed&&a.onDisposed(p),x=!0;break;default:throw new Error("Unexception type "+p.type)}if(g)return{error:g};if(y)for(f in c[f]=m,u(d,p.outdatedModules),p.outdatedDependencies)r.o(p.outdatedDependencies,f)&&(l[f]||(l[f]=[]),u(l[f],p.outdatedDependencies[f]));x&&(u(d,[p.moduleId]),c[f]=h)}t=void 0;for(var v,_=[],b=0;b<d.length;b++){var I=d[b],M=r.c[I];M&&M.hot._selfAccepted&&c[I]!==h&&!M.hot._selfInvalidated&&_.push({module:I,require:M.hot._requireSelf,errorHandler:M.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var t,s=d.slice();s.length>0;){var a=s.pop(),o=r.c[a];if(o){var u={},c=o.hot._disposeHandlers;for(b=0;b<c.length;b++)c[b].call(null,u);for(r.hmrD[a]=u,o.hot.active=!1,delete r.c[a],delete l[a],b=0;b<o.children.length;b++){var h=r.c[o.children[b]];h&&(e=h.parents.indexOf(a))>=0&&h.parents.splice(e,1)}}}for(var f in l)if(r.o(l,f)&&(o=r.c[f]))for(v=l[f],b=0;b<v.length;b++)t=v[b],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(e){for(var t in c)r.o(c,t)&&(r.m[t]=c[t]);for(var n=0;n<s.length;n++)s[n](r);for(var i in l)if(r.o(l,i)){var o=r.c[i];if(o){v=l[i];for(var u=[],h=[],f=[],p=0;p<v.length;p++){var m=v[p],g=o.hot._acceptedDependencies[m],y=o.hot._acceptedErrorHandlers[m];if(g){if(-1!==u.indexOf(g))continue;u.push(g),h.push(y),f.push(m)}}for(var x=0;x<u.length;x++)try{u[x].call(null,v)}catch(t){if("function"==typeof h[x])try{h[x](t,{moduleId:i,dependencyId:f[x]})}catch(n){a.onErrored&&a.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[x],error:n,originalError:t}),a.ignoreErrored||(e(n),e(t))}else a.onErrored&&a.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[x],error:t}),a.ignoreErrored||e(t)}}}for(var w=0;w<_.length;w++){var b=_[w],I=b.module;try{b.require(I)}catch(t){if("function"==typeof b.errorHandler)try{b.errorHandler(t,{moduleId:I,module:r.c[I]})}catch(n){a.onErrored&&a.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:n,originalError:t}),a.ignoreErrored||(e(n),e(t))}else a.onErrored&&a.onErrored({type:"self-accept-errored",moduleId:I,error:t}),a.ignoreErrored||e(t)}}return d}}}self.webpackHotUpdaterandom_race=(e,n,i)=>{for(var o in n)r.o(n,o)&&(t[o]=n[o]);i&&s.push(i),a[e]&&(a[e](),a[e]=void 0)},r.hmrI.jsonp=function(e,i){t||(t={},s=[],n=[],i.push(u)),r.o(t,e)||(t[e]=r.m[e])},r.hmrC.jsonp=function(a,l,d,c,h,f){h.push(u),e={},n=l,t=d.reduce((function(e,t){return e[t]=!1,e}),{}),s=[],a.forEach((function(t){r.o(i,t)&&void 0!==i[t]&&(c.push(o(t)),e[t]=!0)})),r.f&&(r.f.jsonpHmr=function(t,n){e&&!r.o(e,t)&&r.o(i,t)&&void 0!==i[t]&&(n.push(o(t)),e[t]=!0)})},r.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(r.p+r.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),r(8022)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,